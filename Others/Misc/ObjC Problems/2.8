//
//  Solution.m
//  Practice
//
//  Created by Danno on 5/9/18.
//  Copyright Â© 2018 Danno. All rights reserved.
//

#import "Solution.h"

@interface Node<__covariant ObjectType: NSObject *>: NSObject
@property (nonatomic, retain) ObjectType value;
@property (nonatomic, retain) Node<ObjectType> *next;

- (id)initWithValue:(ObjectType)value;
@end

@implementation Node

- (id)initWithValue:(id)value{
    self = [super init];
    if (self) {
        self.value = value;
    }
    return self;
}

- (Node *)createNodeAtTailWithValue:(id)value {
    Node *newNode = [[Node alloc] initWithValue:value];
    Node *currentNode = self;
    while (true) {
        if (currentNode.next == nil) {
            currentNode.next = newNode;
            break;
        }
        currentNode = currentNode.next;
    }
    return newNode;
}

- (int)getLength {
    return (self.next != nil ? [self.next getLength] : 0) + 1;
}

- (Node *)findCycleStartWithIntersection:(Node *)node {
    Node *node1 = node;
    Node *node2 = self;
    while (node1 != node2) {
        node1 = node1.next;
        node2 = node2.next;
    }
    return node2;
}

- (Node *)findCycle {
    Node *slow = self;
    Node *fast = self;
    while (fast != nil) {
        slow = slow.next;
        fast = fast.next.next;
        if (slow == fast) {
            return [self findCycleStartWithIntersection:slow];
        }
    }
    return nil;
}

@end
@implementation Solution
- (void)run {

}

@end

//
//  Solution.m
//  Practice
//
//  Created by Danno on 5/9/18.
//  Copyright Â© 2018 Danno. All rights reserved.
//

#import "Solution.h"

@interface NSMutableArray(Utils)
+ (NSMutableArray *)arrayWithDefault:(id)dObject count:(int)count;
@end

@implementation NSMutableArray(Utils)
+ (NSMutableArray *)arrayWithDefault:(id)dObject count:(int)count {
    NSMutableArray *array = [[NSMutableArray alloc] initWithCapacity:count];
    for (int i = 0; i < count; i++) {
        [array addObject:[dObject copy]];
    }
    return array;
}
@end

@interface Listy: NSObject
@property (nonatomic, retain) NSArray *numbers;
- (id)initWithNumbers:(NSArray *)numbers;
@end

@implementation Listy

- (id)initWithNumbers:(NSArray *)numbers {
    self = [super init];
    if (self) {
        self.numbers = [numbers copy];
    }
    return self;
}

- (id)objectAtIndexedSubscript:(unsigned int)idx {
    if (idx >= [self.numbers count]) {
        return @(-1);
    }
    return self.numbers[idx];
}

@end

@implementation Solution

- (int)findNumber:(int)number inListy:(Listy *)listy start:(int)start end:(int)end {
    if (end < start) {
        return -1;
    }
    int middle = (end - start) / 2 + start;
    int midValue = [listy[middle] intValue];
    if (midValue == number) {
        return middle;
    } else if (midValue == -1 || midValue > number) {
        return [self findNumber:number inListy:listy start:start end:middle - 1];
    } else {
        return [self findNumber:number inListy:listy start:middle + 1 end:end];
    }
}
- (int)findNumber:(int)number inListy:(Listy *)listy {
    int index = 1;
    int indValue = [listy[index] intValue];
    while (indValue != -1 && indValue < number) {
        index *= 2;
    }
    return [self findNumber:number inListy:listy start:(index / 2) end:index];
}

- (void)run {
}

@end
